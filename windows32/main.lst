Microsoft (R) Macro Assembler Version 11.00.61030.0	    10/13/16 18:58:07
main.asm						     Page 1 - 1


				.586
				.MODEL FLAT	; only 32 bit addresses, no segment:offset

				INCLUDE io.h   ; header file for input/output
			      C ; IO.H -- header file for I/O macros (listing suppressed)
			      C .NOLIST      ; turn off listing
			      C .LIST        ; begin listing
			      C 

				.STACK 4096	   ; allocate 4096 bytes for the stack

 00000000			.DATA
					; This is an unsigned problem. There are no negative numbers in this code.
					; The array elements will be bytes, because they will be ASCII coded strings.

						; This string is null-terminated because it will be the destination of the input macro.
						; This is temporary, because it is currently hard-coded.
 00000000 54 68 69 73 20		string BYTE "This is a hard-coded example.", 0
	   69 73 20 61 20
	   68 61 72 64 2D
	   63 6F 64 65 64
	   20 65 78 61 6D
	   70 6C 65 2E 00

						; These numbers will track the numbers of different types of characters in the string
						; We're using words because the length of the string will not exceed 65535
 0000001E 0000				lowerCaseCount WORD 0
 00000020 0000				upperCaseCount WORD 0
 00000022 0000				digitCount WORD 0
 00000024 0000				spaceCount WORD 0
 00000026 0000				otherCount WORD 0

 00000000			.CODE
 00000000			_MainProc PROC
					

					; look for lowercase letters

					; start at first character in string
					; while (not past end of string) {
					;     if (current character is between "a" and "z" inclusive) {
					;	      count it as lowercase
					;     } else
					;     if (current character is between "A" and "Z" inclusive) {
					;	      count it as uppercase
					;     } else
					;     if (current character is between "0" and "9" inclusive) {
					;	      count it as a digit
					;     } else
					;     if (current character is a space) {
					;         count it as a space
					;     } else {
					;         count it as other
					;     }
					;     go to next character
					; }

 00000000  8D 1D 00000000 R		lea ebx, string				; address of first byte of string into ebx.
												; char := first character of string
 00000006  BF 00000000			mov edi, 0					; index := 0
 0000000B			countLoop:
 0000000B  80 3C 3B 00			cmp BYTE PTR [ebx + 1*edi], 0		; char == 0?
 0000000F  74 67			jz exitCountLoop			; quit upon reaching 0
					
 00000011  80 3C 3B 61			cmp BYTE PTR [ebx + 1*edi], "a"
 00000015  72 08			jb notLowerCase				; when char < "a", not lower case
 00000017  80 3C 3B 7A			cmp BYTE PTR [ebx + 1*edi], "z"
 0000001B  77 02			ja notLowerCase				; when char > "z", not lower case

 0000001D  EB 2E			jmp isLowerCase
 0000001F			notLowerCase:
					
 0000001F  80 3C 3B 41			cmp BYTE PTR [ebx + 1*edi], "A"
 00000023  72 08			jb notUpperCase				; when char < "A", not upper case
 00000025  80 3C 3B 5A			cmp BYTE PTR [ebx + 1*edi], "Z"
 00000029  77 02			ja notUpperCase				; when char > "Z", not upper case

 0000002B  EB 2A			jmp isUpperCase
 0000002D			notUpperCase:

 0000002D  80 3C 3B 30			cmp BYTE PTR [ebx + 1*edi], "0"
 00000031  72 08			jb notADigit				; when char < "0", not a digit
 00000033  80 3C 3B 39			cmp BYTE PTR [ebx + 1*edi], "9"
 00000037  77 02			ja notADigit				; when char > "9", not a digit

 00000039  EB 26			jmp isDigit
 0000003B			notADigit:
					
 0000003B  80 3C 3B 20			cmp BYTE PTR [ebx + 1*edi], " "
 0000003F  75 02			jne notASpace				; when char != " ", not a space

 00000041  EB 28			jmp isSpace
 00000043			notASpace:

					; If we get here, it is because the current character is not in any of the categories so far
					
 00000043  66| 83 05			add otherCount, 1
	   00000026 R 01
 0000004B  EB 26			jmp continueCountLoop

 0000004D			isLowerCase:
 0000004D  66| 83 05			add lowerCaseCount, 1
	   0000001E R 01
 00000055  EB 1C			jmp continueCountLoop
 00000057			isUpperCase:
 00000057  66| 83 05			add upperCaseCount, 1
	   00000020 R 01
 0000005F  EB 12			jmp continueCountLoop
 00000061			isDigit:
 00000061  66| 83 05			add digitCount, 1
	   00000022 R 01
 00000069  EB 08			jmp continueCountLoop
 0000006B			isSpace:
 0000006B  66| 83 05			add spaceCount, 1
	   00000024 R 01

 00000073			continueCountLoop:
 00000073  83 C7 01			add edi, 1					; char := next character
 00000076  EB 93			jmp countLoop
 00000078			exitCountLoop:
					

 00000078			quit:
 00000078  B8 00000000			mov eax, 0					; exit with return code 0
					
 0000007D  C3				ret
 0000007E			_MainProc ENDP

				END   ; end of source code
Microsoft (R) Macro Assembler Version 11.00.61030.0	    10/13/16 18:58:07
main.asm						     Symbols 2 - 1




Macros:

                N a m e                 Type

atod . . . . . . . . . . . . . .	Proc
atow . . . . . . . . . . . . . .	Proc
dtoa . . . . . . . . . . . . . .	Proc
input  . . . . . . . . . . . . .	Proc
output . . . . . . . . . . . . .	Proc
wtoa . . . . . . . . . . . . . .	Proc


Segments and Groups:

                N a m e                 Size     Length   Align   Combine Class

FLAT . . . . . . . . . . . . . .	GROUP
STACK  . . . . . . . . . . . . .	32 Bit	 00001000 Para	  Stack	  'STACK'	 
_DATA  . . . . . . . . . . . . .	32 Bit	 00000028 Para	  Public  'DATA'	
_TEXT  . . . . . . . . . . . . .	32 Bit	 0000007E Para	  Public  'CODE'	


Procedures, parameters, and locals:

                N a m e                 Type     Value    Attr

_MainProc  . . . . . . . . . . .	P Near	 00000000 _TEXT	Length= 0000007E Public
  countLoop  . . . . . . . . . .	L Near	 0000000B _TEXT	
  notLowerCase . . . . . . . . .	L Near	 0000001F _TEXT	
  notUpperCase . . . . . . . . .	L Near	 0000002D _TEXT	
  notADigit  . . . . . . . . . .	L Near	 0000003B _TEXT	
  notASpace  . . . . . . . . . .	L Near	 00000043 _TEXT	
  isLowerCase  . . . . . . . . .	L Near	 0000004D _TEXT	
  isUpperCase  . . . . . . . . .	L Near	 00000057 _TEXT	
  isDigit  . . . . . . . . . . .	L Near	 00000061 _TEXT	
  isSpace  . . . . . . . . . . .	L Near	 0000006B _TEXT	
  continueCountLoop  . . . . . .	L Near	 00000073 _TEXT	
  exitCountLoop  . . . . . . . .	L Near	 00000078 _TEXT	
  quit . . . . . . . . . . . . .	L Near	 00000078 _TEXT	


Symbols:

                N a m e                 Type     Value    Attr

@CodeSize  . . . . . . . . . . .	Number	 00000000h   
@DataSize  . . . . . . . . . . .	Number	 00000000h   
@Interface . . . . . . . . . . .	Number	 00000000h   
@Model . . . . . . . . . . . . .	Number	 00000007h   
@code  . . . . . . . . . . . . .	Text   	 _TEXT
@data  . . . . . . . . . . . . .	Text   	 FLAT
@fardata?  . . . . . . . . . . .	Text   	 FLAT
@fardata . . . . . . . . . . . .	Text   	 FLAT
@stack . . . . . . . . . . . . .	Text   	 FLAT
_getInput  . . . . . . . . . . .	L Near	 00000000 FLAT	External
_showOutput  . . . . . . . . . .	L Near	 00000000 FLAT	External
atodproc . . . . . . . . . . . .	L Near	 00000000 FLAT	External
atowproc . . . . . . . . . . . .	L Near	 00000000 FLAT	External
digitCount . . . . . . . . . . .	Word	 00000022 _DATA	
dtoaproc . . . . . . . . . . . .	L Near	 00000000 FLAT	External
lowerCaseCount . . . . . . . . .	Word	 0000001E _DATA	
otherCount . . . . . . . . . . .	Word	 00000026 _DATA	
spaceCount . . . . . . . . . . .	Word	 00000024 _DATA	
string . . . . . . . . . . . . .	Byte	 00000000 _DATA	
upperCaseCount . . . . . . . . .	Word	 00000020 _DATA	
wtoaproc . . . . . . . . . . . .	L Near	 00000000 FLAT	External

	   0 Warnings
	   0 Errors
