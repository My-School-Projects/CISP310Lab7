Microsoft (R) Macro Assembler Version 11.00.61030.0	    10/13/16 15:23:40
main.asm						     Page 1 - 1


				.586
				.MODEL FLAT	; only 32 bit addresses, no segment:offset

				INCLUDE io.h   ; header file for input/output
			      C ; IO.H -- header file for I/O macros (listing suppressed)
			      C .NOLIST      ; turn off listing
			      C .LIST        ; begin listing
			      C 

				.STACK 4096	   ; allocate 4096 bytes for the stack

 00000000			.DATA
					
 00000000 00000000			number1 DWORD 0
 00000004 00000000			number2 DWORD 0
 00000008 45 6E 74 65 72		prompt1 BYTE "Enter first number x", 0
	   20 66 69 72 73
	   74 20 6E 75 6D
	   62 65 72 20 78
	   00
 0000001D 45 6E 74 65 72		prompt2 BYTE "Enter second number y", 0
	   20 73 65 63 6F
	   6E 64 20 6E 75
	   6D 62 65 72 20
	   79 00
 00000033  00000014 [			string BYTE 20 DUP (0)
	    00
	   ]
 00000047 33 20 2A 20 78		resultLabel BYTE "3 * x + 7 * y", 0
	   20 2B 20 37 20
	   2A 20 79 00
 00000055  0000000B [			result BYTE 11 DUP (0), 0
	    00
	   ] 00

 00000000			.CODE
 00000000			_MainProc PROC

					; Get number1 from user
					input prompt1, string, 20
					atod string
 0000002D  A3 00000000 R		mov number1, eax

					; Get number2 from user
					input prompt2, string, 20
					atod string
 0000005F  A3 00000004 R		mov number2, eax

 00000064  FF 35 00000004 R		push number2				; 2nd parameter
 0000006A  FF 35 00000000 R		push number1				; 1st parameter
 00000070  E8 0000003A			call func1					; func1(number1, number2)
 00000075  83 C4 08			add esp, 8					; remove parameters from stack

					; Display result
					dtoa result, eax
					output resultLabel, result

 000000A9  B8 00000000			mov eax, 0					; exit with return code 0
					
 000000AE  C3				ret
 000000AF			_MainProc ENDP

				; int func1 (int, int)
				; returns 3 * x + 7 * y
 000000AF			func1 PROC
					
 000000AF  55				push ebp					; save base pointer
 000000B0  8B EC			mov ebp, esp				; establish stack frame
 000000B2  53				push ebx					; save ebx

 000000B3  8B 45 08			mov eax, [ebp+8]			; eax := x
 000000B6  6B C0 03			imul eax, 3					; eax := x * 3
 000000B9  8B 5D 0C			mov ebx, [ebp+12]			; ebx := y
 000000BC  6B DB 07			imul ebx, 7					; ebx := y * 7
 000000BF  03 C3			add eax, ebx				; eax := x * 3 + y * 7

 000000C1  5B				pop ebx						; restore ebx
 000000C2  5D				pop ebp						; restore base pointer

 000000C3  C3				ret							; return
 000000C4			func1 ENDP

				END   ; end of source code
Microsoft (R) Macro Assembler Version 11.00.61030.0	    10/13/16 15:23:40
main.asm						     Symbols 2 - 1




Macros:

                N a m e                 Type

atod . . . . . . . . . . . . . .	Proc
atow . . . . . . . . . . . . . .	Proc
dtoa . . . . . . . . . . . . . .	Proc
input  . . . . . . . . . . . . .	Proc
output . . . . . . . . . . . . .	Proc
wtoa . . . . . . . . . . . . . .	Proc


Segments and Groups:

                N a m e                 Size     Length   Align   Combine Class

FLAT . . . . . . . . . . . . . .	GROUP
STACK  . . . . . . . . . . . . .	32 Bit	 00001000 Para	  Stack	  'STACK'	 
_DATA  . . . . . . . . . . . . .	32 Bit	 00000061 Para	  Public  'DATA'	
_TEXT  . . . . . . . . . . . . .	32 Bit	 000000C4 Para	  Public  'CODE'	


Procedures, parameters, and locals:

                N a m e                 Type     Value    Attr

_MainProc  . . . . . . . . . . .	P Near	 00000000 _TEXT	Length= 000000AF Public
func1  . . . . . . . . . . . . .	P Near	 000000AF _TEXT	Length= 00000015 Public


Symbols:

                N a m e                 Type     Value    Attr

@CodeSize  . . . . . . . . . . .	Number	 00000000h   
@DataSize  . . . . . . . . . . .	Number	 00000000h   
@Interface . . . . . . . . . . .	Number	 00000000h   
@Model . . . . . . . . . . . . .	Number	 00000007h   
@code  . . . . . . . . . . . . .	Text   	 _TEXT
@data  . . . . . . . . . . . . .	Text   	 FLAT
@fardata?  . . . . . . . . . . .	Text   	 FLAT
@fardata . . . . . . . . . . . .	Text   	 FLAT
@stack . . . . . . . . . . . . .	Text   	 FLAT
_getInput  . . . . . . . . . . .	L Near	 00000000 FLAT	External
_showOutput  . . . . . . . . . .	L Near	 00000000 FLAT	External
atodproc . . . . . . . . . . . .	L Near	 00000000 FLAT	External
atowproc . . . . . . . . . . . .	L Near	 00000000 FLAT	External
dtoaproc . . . . . . . . . . . .	L Near	 00000000 FLAT	External
number1  . . . . . . . . . . . .	DWord	 00000000 _DATA	
number2  . . . . . . . . . . . .	DWord	 00000004 _DATA	
prompt1  . . . . . . . . . . . .	Byte	 00000008 _DATA	
prompt2  . . . . . . . . . . . .	Byte	 0000001D _DATA	
resultLabel  . . . . . . . . . .	Byte	 00000047 _DATA	
result . . . . . . . . . . . . .	Byte	 00000055 _DATA	
string . . . . . . . . . . . . .	Byte	 00000033 _DATA	
wtoaproc . . . . . . . . . . . .	L Near	 00000000 FLAT	External

	   0 Warnings
	   0 Errors
